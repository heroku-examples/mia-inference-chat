---
description: 
globs: 
alwaysApply: true
---
# Node.js Project Ruleset

## Project Structure
```
project-root/
├── client/              # Client-side code
│   ├── ui/              # UI components
│   └── ...              # Other client modules
├── server/              # Server-side code
│   ├── lib/             # Server library code
│   └── ...              # Other server modules
├── tests/               # Test files
└── ...
```

## Technology Stack

### Core Requirements
- **Language**: TypeScript with `tsc` configuration
- **HTTP Client**: Use native `fetch` or `undici` (never use Axios)
- **Testing**: Node.js native test runner or vitest when UI is involved
- **Database**: PostgreSQL with `node-pg` driver (no ORMs)
- **Server Framework**: Fastify 5.x (preferred over Express)
- **Frontend Builder**: Vite for React projects
- **Logging**: Use `pino` for logging, create a reausable logger `logger.js` under /server/lib/
- **Package Manager**: pnpm
- **Monolith**: If having both Client and Server use workspaces
- **Development**: Use `node --watch` never use Nodemon
- **Code Style**: Use `biome`

### Code Style
- Follow StandardJS style with semicolons (`standard-semi`)
- Use TypeScript interfaces for type definitions
- Implement proper error handling with custom error classes
- Always use `node:` for core dependencies

### Development Workflow
- Use ESM modules instead of CommonJS where possible
- Separate business logic from API handlers
- Keep environment variables in a `.env` file (not committed to version control)
- Implement logging that's configurable by environment

### Database Practices
- Write raw SQL queries using parameterized statements
- Structure database interactions in dedicated modules
- Implement connection pooling for efficiency
- Use transactions for operations that require atomicity

### Security Considerations
- Validate all input data before processing
- Implement proper authentication and authorization
- Apply rate limiting on API endpoints
- Set appropriate CORS policies
- Use HTTPS in production environments

This ruleset provides a consistent foundation for Node.js projects while leveraging modern practices and efficient technologies. The structure separates concerns cleanly between client and server, making codebases more maintainable and easier to understand.